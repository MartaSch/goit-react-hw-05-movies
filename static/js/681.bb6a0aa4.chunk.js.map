{"version":3,"file":"static/js/681.bb6a0aa4.chunk.js","mappings":"+PAGaA,EAAU,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAqBN,EAAAA,EAAAA,UAAS,MAArBO,GAAT,eAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,2FACvBH,GAAW,GADY,mBAGCI,EAAAA,EAAAA,IAAmBP,GAHpB,OAGfF,EAHe,OAIrBC,EAAWD,GAJU,gDAMrBM,EAAS,KAAMI,SANM,yBAQrBL,GAAW,GARU,4EAAH,qDAWtBG,GACD,GAAE,CAACN,KAGF,8BACGE,GACC,yCAEA,yBACGJ,EAAQW,OAAS,GAChBX,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,4BACE,oCAAYD,MACZ,6BAAKC,EAAL,SAFQF,EADA,OAUvB,C,+LCvCDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EACM,sBADNA,EAEI,gBAFJA,EAGK,SAHLA,EAIK,WAJLA,EAKK,WAGLC,EAAmB,mCAAG,sGACHH,EAAAA,EAAAA,IAAA,UAAaE,EAAb,oBAAuCD,IADpC,uBAClBG,EADkB,EAClBA,KADkB,kBAEnBA,EAAKC,SAFc,2CAAH,qDAKnBC,EAAmB,mCAAG,WAAMC,GAAN,yFACHP,EAAAA,EAAAA,IAAA,UAClBE,EADkB,oBACMD,EADN,kBACuBM,IAFpB,uBAClBH,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,sDAOnBG,EAAkB,mCAAG,WAAMtB,GAAN,yFACFc,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACDhB,EADC,oBACkBe,IAFhB,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOlBK,EAAkB,mCAAG,WAAMvB,GAAN,yFACFc,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACDhB,EADC,YACUgB,EADV,oBACmCD,IAFjC,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOlBX,EAAkB,mCAAG,WAAMP,GAAN,yFACFc,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACDhB,EADC,YACUgB,EADV,oBACmCD,IAFjC,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,qD","sources":["components/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsMovies } from 'services/api';\nexport const Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [, setError] = useState(null);\n\n  useEffect(() => {\n    const getMoviesReviews = async () => {\n      setLoading(true);\n      try {\n        const reviews = await fetchReviewsMovies(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMoviesReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        <div>\n          {reviews.length > 0 &&\n            reviews.map(({ id, author, content }) => (\n              <div key={id}>\n                <p>Author: {author}</p>\n                <p>\"{content}\"</p>\n              </div>\n            ))}\n        </div>\n      )}\n    </>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3bffe50dfda579cb925403e66a2c7938';\nconst PARAM = {\n  trending: '/trending/movie/day',\n  search: '/search/movie',\n  details: '/movie',\n  credits: '/credits',\n  reviews: '/reviews',\n};\n\nconst fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`${PARAM.trending}?api_key=${API_KEY}`);\n  return data.results;\n};\n\nconst fetchSerchingMovies = async query => {\n  const { data } = await axios.get(\n    `${PARAM.search}?api_key=${API_KEY}&query=${query}`\n  );\n  return data.results;\n};\n\nconst fetchDetailsMovies = async movieId => {\n  const { data } = await axios.get(\n    `${PARAM.details}/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst fetchCreditsMovies = async movieId => {\n  const { data } = await axios.get(\n    `${PARAM.details}/${movieId}/${PARAM.credits}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst fetchReviewsMovies = async movieId => {\n  const { data } = await axios.get(\n    `${PARAM.details}/${movieId}/${PARAM.reviews}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport {\n  fetchTrendingMovies,\n  fetchSerchingMovies,\n  fetchDetailsMovies,\n  fetchCreditsMovies,\n  fetchReviewsMovies,\n};\n"],"names":["Reviews","useState","reviews","setReviews","movieId","useParams","loading","setLoading","setError","useEffect","getMoviesReviews","fetchReviewsMovies","message","length","map","id","author","content","axios","API_KEY","PARAM","fetchTrendingMovies","data","results","fetchSerchingMovies","query","fetchDetailsMovies","fetchCreditsMovies"],"sourceRoot":""}
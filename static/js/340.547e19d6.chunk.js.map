{"version":3,"file":"static/js/340.547e19d6.chunk.js","mappings":"2LACA,EAA4B,6BAA5B,EAAyE,iC,SCG5DA,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpBC,GAAWC,EAAAA,EAAAA,MACXC,EAAWF,EAASG,SAAWH,EAASI,OAC9C,OACE,+BACE,eAAIC,UAAWC,EAAf,SACGP,EAAWQ,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACd,yBACE,SAAC,KAAD,CACEJ,UAAWC,EACXI,GAAI,CACFP,SAAS,WAAD,OAAaM,GACrBE,MAAO,CAAET,SAAAA,IAJb,SAOGM,KARIC,EADK,OAgBvB,C,0GCPUG,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACR,EAAIS,GAWvD,OARET,IAFFS,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,SClBpB,EAAuC,0CAAvC,EAAgG,kCAAhG,EAAgJ,iC,SCGnIG,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,gBAAKpB,UAAWC,EAAhB,UACE,kBAAMgB,SAbW,SAAAI,GACnBA,EAAEC,iBACFL,EAASE,GACTC,EAAc,GACf,EASG,WACE,mBAAQpB,UAAWC,EAAkBsB,KAAK,SAA1C,UACE,wCAEF,kBACEvB,UAAWC,EACXG,GAAIG,IACJgB,KAAK,OACLC,WAAS,EACTC,aAAa,MACbC,YAAY,gBACZC,SAlBY,SAAAN,GAClB,IAAQO,EAAUP,EAAEQ,OAAZD,MACRR,EAAcQ,EACf,QAoBF,E,kBC/BYE,EAAS,WACpB,OAA0BZ,EAAAA,EAAAA,UAAS,IAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAA4Bd,EAAAA,EAAAA,UAAS,IAArC,eAAOnB,EAAP,KAAekC,EAAf,KACA,GAAqBf,EAAAA,EAAAA,UAAS,MAArBgB,GAAT,eAuBA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,8GAEFC,EAAAA,EAAAA,IAAoBN,GAFlB,OAEjBhC,EAFiB,OAGvBkC,EAAUlC,GAHa,gDAKvBmC,EAAS,KAAMI,SALQ,yDAAH,qDAQxBF,GACD,GAAE,CAACL,KAGF,iCACE,SAACf,EAAD,CAAae,MAAOA,EAAOd,SAvBJ,SAAAsB,GACD,KAApBA,EAASC,QAIbR,EAASO,GACTN,EAAU,KAJRQ,MAAM,oCAKT,KAiBG,SAAChD,EAAA,EAAD,CAAWC,WAAYK,MAG5B,C,+LCnCD2C,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EACM,sBADNA,EAEI,gBAFJA,EAGK,SAHLA,EAIK,WAJLA,EAKK,WAILC,EAAmB,mCAAG,sGACHH,EAAAA,EAAAA,IAAA,UAAaE,EAAb,oBAAuCD,IADpC,uBAClBG,EADkB,EAClBA,KADkB,kBAEnBA,EAAKC,SAFc,2CAAH,qDAKnBV,EAAmB,mCAAG,WAAMN,GAAN,yFACHW,EAAAA,EAAAA,IAAA,UAClBE,EADkB,oBACMD,EADN,kBACuBZ,IAFpB,uBAClBe,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,sDAOnBC,EAAkB,mCAAG,WAAM5C,GAAN,yFACFsC,EAAAA,EAAAA,IAAA,UAAaE,EAAb,YAA8BxC,EAA9B,oBAA4CuC,IAD1C,uBACjBG,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKlBG,EAAkB,mCAAG,WAAM7C,GAAN,yFACFsC,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACDxC,GADC,OACIwC,EADJ,oBAC6BD,IAF3B,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOlBI,EAAkB,mCAAG,WAAM9C,GAAN,yFACFsC,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACDxC,GADC,OACIwC,EADJ,oBAC6BD,IAF3B,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/MovieElements/MovieList.module.css?05b3","components/MovieElements/MovieList.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/SearchInput/SearchInput.module.css?3e06","components/SearchInput/SearchInput.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MovieList\":\"MovieList_MovieList__nf-K1\",\"MovieListItem\":\"MovieList_MovieListItem__N-4lV\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MovieList.module.css';\n\nexport const MovieList = ({ moviesList }) => {\n  const location = useLocation();\n  const fullPath = location.pathname + location.movies;\n  return (\n    <>\n      <ul className={css.MovieList}>\n        {moviesList.map(({ title, id }) => (\n          <li key={id}>\n            <Link\n              className={css.MovieListItem}\n              to={{\n                pathname: `/movies/${id}`,\n                state: { fullPath },\n              }}\n            >\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  moviesList: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchInputContainer\":\"SearchInput_SearchInputContainer__In8+a\",\"SearchButton\":\"SearchInput_SearchButton__4tHzN\",\"SearchInput\":\"SearchInput_SearchInput__r+ZtX\"};","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport css from './SearchInput.module.css';\nexport const SearchInput = ({ onSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(inputValue);\n    setInputValue('');\n  };\n\n  const handleChage = e => {\n    const { value } = e.target;\n    setInputValue(value);\n  };\n\n  return (\n    <div className={css.SearchInputContainer}>\n      <form onSubmit={handleSubmit}>\n        <button className={css.SearchButton} type=\"submit\">\n          <span>Search</span>\n        </button>\n        <input\n          className={css.SearchInput}\n          id={nanoid()}\n          type=\"text\"\n          autoFocus\n          autoComplete=\"off\"\n          placeholder=\"Search movies\"\n          onChange={handleChage}\n        />\n      </form>\n    </div>\n  );\n};\nSearchInput.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { SearchInput } from 'components/SearchInput/SearchInput';\nimport { MovieList } from 'components/MovieElements/MovieList';\nimport { useState, useEffect } from 'react';\nimport { fetchSerchingMovies } from 'services/api';\n\nexport const Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [, setError] = useState(null);\n\n  const handleSubmitSearch = newQuery => {\n    if (newQuery.trim() === '') {\n      alert('Please, fill in the search field!');\n      return;\n    }\n    setQuery(newQuery);\n    setMovies([]);\n  };\n\n  useEffect(() => {\n    const getSearchingMovies = async () => {\n      try {\n        const movies = await fetchSerchingMovies(query);\n        setMovies(movies);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getSearchingMovies();\n  }, [query]);\n\n  return (\n    <>\n      <SearchInput query={query} onSubmit={handleSubmitSearch} />\n      <MovieList moviesList={movies} />\n    </>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3bffe50dfda579cb925403e66a2c7938';\nconst PARAM = {\n  trending: '/trending/movie/day',\n  search: '/search/movie',\n  details: '/movie',\n  credits: '/credits',\n  reviews: '/reviews',\n  genre: '/genre/movie/list',\n};\n\nconst fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`${PARAM.trending}?api_key=${API_KEY}`);\n  return data.results;\n};\n\nconst fetchSerchingMovies = async query => {\n  const { data } = await axios.get(\n    `${PARAM.search}?api_key=${API_KEY}&query=${query}`\n  );\n  return data.results;\n};\n\nconst fetchDetailsMovies = async id => {\n  const { data } = await axios.get(`${PARAM.details}/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nconst fetchCreditsMovies = async id => {\n  const { data } = await axios.get(\n    `${PARAM.details}/${id}${PARAM.credits}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst fetchReviewsMovies = async id => {\n  const { data } = await axios.get(\n    `${PARAM.details}/${id}${PARAM.reviews}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport {\n  fetchTrendingMovies,\n  fetchSerchingMovies,\n  fetchDetailsMovies,\n  fetchCreditsMovies,\n  fetchReviewsMovies,\n};\n"],"names":["MovieList","moviesList","location","useLocation","fullPath","pathname","movies","className","css","map","title","id","to","state","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","SearchInput","onSubmit","useState","inputValue","setInputValue","e","preventDefault","type","autoFocus","autoComplete","placeholder","onChange","value","target","Movies","query","setQuery","setMovies","setError","useEffect","getSearchingMovies","fetchSerchingMovies","message","newQuery","trim","alert","axios","API_KEY","PARAM","fetchTrendingMovies","data","results","fetchDetailsMovies","fetchCreditsMovies","fetchReviewsMovies"],"sourceRoot":""}